#!/usr/bin/env bash

set -e
set -o pipefail

export DEBIAN_FRONTEND=noninteractive


usage() {
  echo "
usage: ubuntu.sh <command> [<args>]

base                      install base required packages
dotfiles                  gets dotfiles
asdf                      install asdf version manager
pipx                      install pipx - for running python apps in virtual environments"
}

# Choose a user account to use for this installation
get_user() {
  if [ -z "${TARGET_USER-}" ]; then
    mapfile -t options < <(find /home/* -maxdepth 0 -printf "%f\\n" -type d)
    # if there is only one option just use that user
    if [ "${#options[@]}" -eq "1" ]; then
      readonly TARGET_USER="${options[0]}"
      echo "Using user account: ${TARGET_USER}"
      return
    fi

    # iterate through the user options and print them
    PS3='command -v user account should be used? '

    select opt in "${options[@]}"; do
      readonly TARGET_USER=$opt
      break
    done
  fi
}

check_is_sudo() {
  if [ "$EUID" -ne 0 ]; then
    echo "Please run as root."
    exit
  fi
}

app_exists() {
  local app="$1"

  if (! type "$app" >/dev/null 2>&1); then
    # App doesn't exist
    return 1
  else
    # App exists
    return 0
  fi
}

install_if_missing() {
  local app="$1"

  if app_exists "$app"; then
    echo "$app already installed"
  else
    echo "$app not installed; installing now!"
    install_"$app"
  fi
}

setup_sources() {
  if [ ! $DISTRIB_CODENAME = 'focal' ]; then
    # Older versions of ubuntu need the rcm repository added
    add-apt-repository --yes \
      ppa:martin-frost/thoughtbot-rcm
  fi
}

install_fzf() {
  if ! [[ -d "$HOME/.fzf" ]]; then
    git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf
    # Install fzf using the fzf install script with the following arguments:
    # - key-bindings - enable key bindings (ctrl-t, ctrl-r, alt-c)
    # - completion - Enable fuzzy completion
    # - no-update-rc - don't update the shell configuration files (it's already updated in this
    #   dotfiles configuration
    # - no-bash - since these dotfiles expect zsh
    # - no-fish - since these dotfiles expect zsh
    # - 64 - 64-bit binary instead of 32
    ~/.fzf/install --key-bindings --completion --no-update-rc --no-bash --no-fish --64
  else
    echo "fzf already instealled; skipping"
  fi
}

base_min() {
  apt update || true
  apt -y upgrade

  apt install -y \
    apt-transport-https \
    autoconf \
    automake \
    bc \
    build-essential \
    bzip2 \
    ca-certificates \
    caca-utils \
    calibre \
    coreutils \
    curl \
    dirmngr \
    djvulibre-bin \
    dnsutils \
    ffmpegthumbnailer \
    file \
    findutils \
    fontforge \
    gcc \
    git \
    gnupg \
    gnupg2 \
    gpg \
    grep \
    gzip \
    highlight \
    hostname \
    imagemagick-6.q16 \
    indent \
    iptables \
    jq \
    less \
    libc6-dev \
    libevent-dev \
    libffi-dev \
    libimage-exiftool-perl \
    libncurses5-dev \
    libreadline-dev \
    libssl-dev \
    libtool \
    libyaml-dev \
    libxslt-dev \
    locales \
    lsof \
    make \
    mount \
    net-tools \
    odt2txt \
    p7zip-full \
    pkg-config \
    poppler-utils \
    python-chardet \
    python3-pip \
    ranger \
    rcm \
    silversearcher-ag \
    ssh \
    strace \
    sudo \
    tar \
    transmission-cli \
    tree \
    tzdata \
    unixodbc-dev \
    unzip \
    w3m \
    xclip \
    xz-utils \
    zip \
    zsh \
    --no-install-recommends

  apt autoremove -y
  apt autoclean
  apt clean

  # Upgrade setuptools
  # Setuptools is a tool to download, build, install, upgrade, and uninstall Python packages
  sudo -H -u "$TARGET_USER" pip3 install --user --upgrade setuptools

  chsh -s $(which zsh)
}

base() {
  base_min
}

install_asdf() {
  git clone https://github.com/asdf-vm/asdf.git ~/.asdf
  (
    cd ~/.asdf
    git checkout "$(git describe --abbrev=0 --tags)"
  )
}

install_pipx() {
  python3 -m pip install --user pipx
  python3 -m pipx ensurepath
}

get_dotfiles() {
	# create subshell
  (
  cd "$HOME"

  if [[ ! -d "${HOME}/.dotfiles" ]]; then
    # install dotfiles from repo
    # use https in case an ssh key hasn't been setup yet
    echo "Cloning dotfiles into \$HOME/.dotfiles"
    git clone https://github.com/ncronquist/dotfiles.git "${HOME}/.dotfiles"
  fi

  cd "${HOME}/.dotfiles"

  # switch the remote to ssh andk we'll assume an ssh key will be
  # setup before trying to push any changes
  git remote set-url origin git@github.com:ncronquist/dotfiles.git

  echo -e 'Dotfiles are now available at $HOME/.dotfiles.'
  echo -e 'Move to that directory and run "./install/ubuntu" to install the required dependencies.'
  echo -e '\n\n  cd $HOME/.dotfiles\n  ./install/ubuntu\n'
  )
}

main() {
  local command="$1"
  case $command in
  "" | "-h" | "--help")
    usage
    ;;
  "base")
    . /etc/lsb-release
    check_is_sudo
    get_user
    setup_sources
    base
    ;;
  "dotfiles")
    get_dotfiles
    ;;
  "asdf")
    install_asdf
    ;;
  "pipx")
    install_pipx
    ;;
  "fzf")
    install_fzf
    ;;
  *)
    usage
    ;;
  esac
}

main "$@"
